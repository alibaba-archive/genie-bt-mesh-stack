ifneq ($(filter tc% , $(HOST_ARCH)),)

TOOLCHAIN_PATH ?=
TOOLCHAIN_DEFAULT_FOLDER := tc32
TOOLCHAIN_PATH    := $(COMPILER_ROOT)/$(TOOLCHAIN_DEFAULT_FOLDER)/bin/
TOOLCHAIN_PREFIX  := tc32-elf-
EXECUTABLE_SUFFIX := .exe


ifeq ($(HOST_OS),Win32)
################
# Windows settings
################
CHECK_FILE := $(TOOLCHAIN_PATH)$(TOOLCHAIN_PREFIX)gcc$(EXECUTABLE_SUFFIX)
ifeq ($(CHECK_FILE), $(wildcard $(CHECK_FILE)))
# existed.
else
$(warning Download tc32 compilation toolchain from the web)
DOWNLOAD_TOOLCHAIN_URL      ="http://wiki.telink-semi.cn/telink_shenzhen/gcc_for_ali_mesh/gcc-tc32-elf-win.zip"
DOWNLOAD_TOOLCHAIN_FILENAME =gcc-tc32-elf-win.zip
DOWNLOAD_UNZIP_URL         ="http://wiki.telink-semi.cn/telink_shenzhen/gcc_for_ali_mesh/unzip.exe"
DOWNLOAD_UNZIP_FILENAME     =unzip.exe
TEMP_FOLDER := $(SOURCE_ROOT)tmp
TEMP_INFO:=$(shell "$(COMMON_TOOLS_PATH)rm$(EXECUTABLE_SUFFIX)" -rf "$(TEMP_FOLDER)")
TEMP_INFO:=$(shell "$(COMMON_TOOLS_PATH)mkdir$(EXECUTABLE_SUFFIX)" -p "$(TEMP_FOLDER)/" "$(SOURCE_ROOT)build/compiler/")
TEMP_INFO:=$(shell "$(COMMON_TOOLS_PATH)wget$(EXECUTABLE_SUFFIX)" "$(DOWNLOAD_TOOLCHAIN_URL)" -O "$(TEMP_FOLDER)/$(DOWNLOAD_TOOLCHAIN_FILENAME)")
TEMP_INFO:=$(shell "$(COMMON_TOOLS_PATH)wget$(EXECUTABLE_SUFFIX)" "$(DOWNLOAD_UNZIP_URL)" -O "$(TEMP_FOLDER)/$(DOWNLOAD_UNZIP_FILENAME)")
TEMP_INFO:=$(shell $(TEMP_FOLDER)/$(DOWNLOAD_UNZIP_FILENAME) -o $(TEMP_FOLDER)/$(DOWNLOAD_TOOLCHAIN_FILENAME) -d $(SOURCE_ROOT)build/compiler)
TEMP_INFO:=$(shell "$(COMMON_TOOLS_PATH)rm$(EXECUTABLE_SUFFIX)" -rf "$(TEMP_FOLDER)")
endif

endif # Win32

CC      := $(TOOLCHAIN_PATH)$(TOOLCHAIN_PREFIX)gcc$(EXECUTABLE_SUFFIX)
CXX     := $(TOOLCHAIN_PATH)$(TOOLCHAIN_PREFIX)g++$(EXECUTABLE_SUFFIX)
#AS      := $(TOOLCHAIN_PATH)$(TOOLCHAIN_PREFIX)as$(EXECUTABLE_SUFFIX)
AS       := $(CC)
AR      := $(TOOLCHAIN_PATH)$(TOOLCHAIN_PREFIX)ar$(EXECUTABLE_SUFFIX)
LD      := $(TOOLCHAIN_PATH)$(TOOLCHAIN_PREFIX)ld$(EXECUTABLE_SUFFIX)
CPP     := $(TOOLCHAIN_PATH)$(TOOLCHAIN_PREFIX)cpp$(EXECUTABLE_SUFFIX)
OPTIONS_IN_FILE_OPTION    := @

CHECK_FW_TOOL_PATH := $(COMPILER_ROOT)/$(TOOLCHAIN_DEFAULT_FOLDER)/
CHECK_FW_TOOL      := $(CHECK_FW_TOOL_PATH)tl_check_fw$(EXECUTABLE_SUFFIX)

export PATH
ADD_COMPILER_SPECIFIC_STANDARD_CFLAGS   =-ggdb -Wall -fshort-enums -finline-small-functions -std=gnu99 -fshort-wchar -fms-extensions $(1) $(if $(filter yes,$(MXCHIP_INTERNAL) $(TESTER)),-Werror)
ADD_COMPILER_SPECIFIC_STANDARD_CXXFLAGS =-ggdb -Wall -fshort-enums -finline-small-functions -std=gnu99 -fshort-wchar -fms-extensions $(1) $(if $(filter yes,$(MXCHIP_INTERNAL) $(TESTER)),-Werror)
ADD_COMPILER_SPECIFIC_STANDARD_ADMFLAGS = $(1)
COMPILER_SPECIFIC_OPTIMIZED_CFLAGS      := -O2
COMPILER_SPECIFIC_UNOPTIMIZED_CFLAGS    := -O0
COMPILER_SPECIFIC_PEDANTIC_CFLAGS  := $(COMPILER_SPECIFIC_STANDARD_CFLAGS)
COMPILER_SPECIFIC_ARFLAGS_CREATE   := -rcs
COMPILER_SPECIFIC_ARFLAGS_ADD      := -rcs
COMPILER_SPECIFIC_ARFLAGS_VERBOSE  := -v

#debug: no optimize and log enable
COMPILER_SPECIFIC_DEBUG_CFLAGS     := -DDEBUG $(COMPILER_SPECIFIC_UNOPTIMIZED_CFLAGS)
COMPILER_SPECIFIC_DEBUG_CXXFLAGS   := -DDEBUG $(COMPILER_SPECIFIC_UNOPTIMIZED_CFLAGS)
COMPILER_SPECIFIC_DEBUG_ASFLAGS    := --defsym DEBUG=1
COMPILER_SPECIFIC_DEBUG_LDFLAGS    := --gc-sections -nostdlib --cref

#release_log: optimize but log enable
COMPILER_SPECIFIC_RELEASE_LOG_CFLAGS   := -ggdb $(COMPILER_SPECIFIC_OPTIMIZED_CFLAGS)
COMPILER_SPECIFIC_RELEASE_LOG_CXXFLAGS := -ggdb $(COMPILER_SPECIFIC_OPTIMIZED_CFLAGS)
COMPILER_SPECIFIC_RELEASE_LOG_ASFLAGS  :=
COMPILER_SPECIFIC_RELEASE_LOG_LDFLAGS  := --gc-sections $(COMPILER_SPECIFIC_OPTIMIZED_CFLAGS) --cref

#release: optimize and log disable
COMPILER_SPECIFIC_RELEASE_CFLAGS   := -DNDEBUG $(COMPILER_SPECIFIC_OPTIMIZED_CFLAGS)
COMPILER_SPECIFIC_RELEASE_CXXFLAGS := -DNDEBUG $(COMPILER_SPECIFIC_OPTIMIZED_CFLAGS)
COMPILER_SPECIFIC_RELEASE_ASFLAGS  :
COMPILER_SPECIFIC_RELEASE_LDFLAGS  := --gc-sections $(COMPILER_SPECIFIC_OPTIMIZED_CFLAGS) --cref

COMPILER_SPECIFIC_DEPS_FLAG        := -MD
COMPILER_SPECIFIC_COMP_ONLY_FLAG   := -c
COMPILER_SPECIFIC_LINK_MAP         = -Map $(1)
COMPILER_SPECIFIC_LINK_FILES       = --start-group $(1) --end-group
COMPILER_SPECIFIC_LINK_SCRIPT_DEFINE_OPTION =
COMPILER_SPECIFIC_LINK_SCRIPT      =
LINKER                             := $(LD)
LINK_SCRIPT_SUFFIX                 := .ld
TOOLCHAIN_NAME := GCC
OPTIONS_IN_FILE_OPTION    := @

ENDIAN_CFLAGS_LITTLE   := -mlittle-endian
ENDIAN_CXXFLAGS_LITTLE := -mlittle-endian
ENDIAN_ASMFLAGS_LITTLE :=
ENDIAN_LDFLAGS_LITTLE  := -mlittle-endian
#CLIB_LDFLAGS_NANO      := --specs=nano.specs
#CLIB_LDFLAGS_NANO_FLOAT:= --specs=nano.specs -u _printf_float

# Chip specific flags for GCC

CPU_CFLAGS     :=
CPU_CXXFLAGS   := 
CPU_ASMFLAGS   := 
CPU_LDFLAGS    :=
CLIB_LDFLAGS_NANO       += 
CLIB_LDFLAGS_NANO_FLOAT += 

# $(1) is map file, $(2) is CSV output file
COMPILER_SPECIFIC_MAPFILE_TO_CSV = $(PYTHON) $(MAPFILE_PARSER) $(1) > $(2)

MAPFILE_PARSER            :=$(MAKEFILES_PATH)/scripts/map_parse_gcc.py

# $(1) is map file, $(2) is CSV output file
COMPILER_SPECIFIC_MAPFILE_DISPLAY_SUMMARY = $(PYTHON) $(MAPFILE_PARSER) $(1)

OBJDUMP := "$(TOOLCHAIN_PATH)$(TOOLCHAIN_PREFIX)objdump$(EXECUTABLE_SUFFIX)"
OBJCOPY := "$(TOOLCHAIN_PATH)$(TOOLCHAIN_PREFIX)objcopy$(EXECUTABLE_SUFFIX)"
STRIP   := "$(TOOLCHAIN_PATH)$(TOOLCHAIN_PREFIX)strip$(EXECUTABLE_SUFFIX)"
NM      := "$(TOOLCHAIN_PATH)$(TOOLCHAIN_PREFIX)nm$(EXECUTABLE_SUFFIX)"

STRIP_OUTPUT_PREFIX := -o
OBJCOPY_BIN_FLAGS   := -O binary -R .eh_frame -R .init -R .fini -R .comment -R .ARM.attributes
OBJCOPY_HEX_FLAGS   := -O ihex -R .eh_frame -R .init -R .fini -R .comment -R .ARM.attributes
OBJDUMP_LST_FLAGS   := -x -t -d 

LINK_OUTPUT_SUFFIX  :=.elf
BIN_OUTPUT_SUFFIX :=.bin
HEX_OUTPUT_SUFFIX :=.hex

endif
